- name: Drupal Setup
  hosts: localhost
  tasks:
      - name: Restarting sshd
        shell: "sed -i 's/#Match User anoncvs/ForceCommand echo Please wait until the installation is completed..../g' /etc/ssh/sshd_config && systemctl restart sshd"

      - name: Updating Packages
        ansible.builtin.apt:
          update_cache: yes

      - debug:
         msg: "Installing OpenLitespeed"

      - name: Installing OpenLitespeed RPM
        shell: wget -O - http://rpms.litespeedtech.com/debian/enable_lst_debian_repo.sh | sudo bash

      - name: Installing OpenLitespeed
        apt:
          name: [ 'openlitespeed' , 'certbot' , 'zip' , 'unzip' ]
          state: latest

      - name: Starting service OpenLitespeed
        service:
          name: lsws
          state: started 

      - name: Getting the status of the service
        shell: systemctl status lsws | grep 'since'
        register: status

      - debug:
          var: status.stdout 

      - name: Creating a directory for OpenLitespeed
        ansible.builtin.file:
          path: "{{ item }}"
          state: directory     
          recurse: yes
        with_items:
            - /var/www/html
            - /usr/local/lsws/conf/vhosts/drupal

      - name: Creating a Virtualhost file for OpenLitespeed
        ansible.builtin.file:
          path: /usr/local/lsws/conf/vhosts/drupal/vhconf.conf
          state: touch     
       
      - name: Copying index.html file
        copy:
          src: "{{ item.confsrc }}"
          dest: "{{ item.confdest }}"
        with_items: 
          - { confsrc: '/usr/local/src/drupal-lomp-22-04/var/www/html/index.html', confdest: '/var/www/html/'}  
          - { confsrc: '/usr/local/lsws/Example/html/phpinfo.php', confdest: '/var/www/html/'}  

      - name: Configuring OpenLitespeed
        shell: "{{ item }}"
        with_items:
           - sed -i 's/nobody/www-data/g' /usr/local/lsws/conf/httpd_config.conf
           - sed -i 's/nogroup/www-data/g' /usr/local/lsws/conf/httpd_config.conf

      - name: Restarting OpenLitespeed
        service:
           name: lsws
           state: restarted 
           
      - name: Installing Mariadb
        apt:
          name: ['mariadb-server', 'mariadb-client']
          state: latest

      - name: Starting service Mariadb
        service:
          name: mariadb
          state: started 

      - name: Getting the status of the service
        shell: systemctl status mariadb | grep 'since'
        register: status

      - debug:
          var: status.stdout 

      - name: Generating mariadb password
        shell: openssl rand -hex 24
        register: rootpassword

      - debug:
         var: rootpassword.stdout

      - name: Storing mariadb password
        copy:
          dest: "/root/.mariadb_root_password"
          content: |
            root_mariadb_user = dbadmin
            root_mariadb_pass = "{{ rootpassword.stdout }}"
            
      - name: Remove anonymous users
        command: 'mysql -ne "{{ item }}"'
        with_items:
          - DELETE FROM mysql.user WHERE User=''
        changed_when: False

      - name: Disallow root login remotely
        command: 'mysql -ne "{{ item }}"'
        with_items:
          - DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1')
        changed_when: False

      - name: Remove test database and access to it
        command: 'mysql -ne "{{ item }}"'
        with_items:
          - DROP DATABASE IF EXISTS test
          - DELETE FROM mysql.db WHERE Db='test' OR Db='test\\_%'
        changed_when: False

      - name: Reload privilege tables
        command: 'mysql -ne "{{ item }}"'
        with_items:
          - FLUSH PRIVILEGES
        changed_when: False

      - name: Adding database admin 
        shell: "{{ item }}"
        with_items:
          - mysql -n --execute="GRANT ALL ON *.* TO 'dbadmin'@'localhost' IDENTIFIED BY '{{ rootpassword.stdout }}' WITH GRANT OPTION;"
          - mysql -e "FLUSH PRIVILEGES;"

      - name: Restarting Mariadb
        service:
           name: mariadb
           state: restarted 

      - debug:
          msg: "Mariadb root password is stored under /root/.mariadb_root_password"   
 
      - name: Installing PHP
        apt:
          name: [ 'lsphp81' , 'lsphp81-mysql' , 'lsphp81-common' , 'lsphp81-curl' , 'lsphp81-opcache' ]
          state: latest
      
      - name: Configuring OpenLitespeed
        shell: "{{ item }}"
        with_items:
           - sed -i 's/lsphp74/lsphp81/g' /usr/local/lsws/conf/httpd_config.conf
      
      - name: Download phpmyadmin files
        ansible.builtin.unarchive:
          src: https://files.phpmyadmin.net/phpMyAdmin/5.2.0/phpMyAdmin-5.2.0-all-languages.tar.gz
          dest: /usr/local/src/
          remote_src: yes
    
      - name: Rename a Existing folder & Move the latest Files
        shell: "{{ item }}"
        with_items:
          - 'mv /usr/local/src/phpMyAdmin-5.2.0-all-languages /var/www/phpmyadmin'

      - name: Creating a tmp directory
        ansible.builtin.file:
          path: /var/www/phpmyadmin/tmp
          state: directory
          mode: '0777'

      - name: Generating blowfish password
        shell: openssl rand -base64 22
        register: blowfish

      - debug:
         var: blowfish.stdout

      - name: Download phpmyadmin files
        shell: '{{ item }}'
        with_items:
             - cat /var/www/phpmyadmin/config.sample.inc.php | grep -v blowfish > /var/www/phpmyadmin/config.inc.php
             - echo "\$cfg['blowfish_secret'] = '{{ blowfish.stdout }}' ;" >> /var/www/phpmyadmin/config.inc.php

      - name: Installing PHP dependencies
        apt:
          name: [ 'php-cli' , 'php-xml' , 'php-mbstring' , 'php-gd' , 'php-intl' , 'php-xsl' , 'php-mysql' ]
          state: latest

      # - name: Installing Composer
      #   shell: chmod +x /usr/local/src/drupal-lomp-22-04/composer.sh && /usr/local/src/drupal-lomp-22-04/composer.sh

      # - name: Copy Composer file
      #   copy:
      #     src: /usr/local/src/drupal-lomp-22-04/composer.phar
      #     dest: /usr/local/bin/composer
      #     remote_src: yes

      # - name: Setting permission for composer
      #   ansible.builtin.file:
      #     path: /usr/local/bin/composer
      #     mode: '0755'

      - name: Composer | Install Composer latest-stable
        get_url:
         url: https://getcomposer.org/download/latest-stable/composer.phar
         checksum: 'sha256:https://getcomposer.org/download/latest-stable/composer.phar.sha256sum'
         dest: /usr/local/bin/composer.phar
         mode: 0755
         
      - name: Composer | Symlink composer.phar
        file:
         src: composer.phar
         dest: /usr/local/bin/composer
         state: link

      # - name: Creating a symlink
      #   ansible.builtin.file:
      #     src: "/usr/local/bin/composer"
      #     dest: "/usr/bin/composer"
      #     state: link

      - name: Download the Drush file
        get_url:
         url: https://github.com/drush-ops/drush-launcher/releases/latest/download/drush.phar
         dest: /usr/local/src/drush.phar
               
      - name: Copy Drush file
        copy:
          src: /usr/local/src/drush.phar
          dest: /usr/local/bin/drush
          remote_src: yes

      - name: Setting permission for Drush
        ansible.builtin.file:
          path: /usr/local/bin/drush
          mode: '0755'

      - name: Creating a symlink
        ansible.builtin.file:
          src: "/usr/local/bin/drush"
          dest: "/usr/bin/drush"
          state: link

      - name: Creates directory for drupal
        file:
          path: /usr/local/src/drupal/
          state: directory
        
      - name: Download Drupal files
        ansible.builtin.unarchive:
          src: https://www.drupal.org/download-latest/tar.gz
          dest: /usr/local/src/drupal/
          remote_src: yes

      - name: Getting Drupal Folder
        shell: ls /usr/local/src/drupal | grep drupal -i
        register: drupalfolder

      - name: Rename a Existing folder & Move the latest Files
        shell: "{{ item }}"
        with_items:
          - 'rsync -zavh /usr/local/src/drupal/{{ drupalfolder.stdout }}/. /var/www/html/.'
       
      - name: Generating drupal password
        shell: openssl rand -hex 24
        register: drupalpassword

      - debug:
         var: drupalpassword.stdout

      - name: Storing drupal password
        copy:
          dest: "/root/.drupal_database_details"
          content: |
            drupal_database_name = drupal_db          
            drupal_database_user = drupal_user
            drupal_user_password = "{{ drupalpassword.stdout }}"
          
      - name: Generating Drupal Admin Login credentials
        shell: openssl rand -hex 24
        register: adminpassword

      - debug:
         var: adminpassword.stdout

      - name: Storing Drupal Admin Login credentials
        copy:
          dest: "/root/.Drupal_Admin_Login_Credentials"
          content: |
            Username = admin
            Password = "{{ adminpassword.stdout }}"

      - name: Creating drupal configurations
        shell: "{{ item }}"
        with_items:
          - mysql -e 'create database drupal_db'
          - mysql -e "CREATE USER 'drupal_user'@'localhost' IDENTIFIED BY '{{ drupalpassword.stdout }}';" 
          - mysql -e "GRANT ALL PRIVILEGES ON drupal_db.* TO 'drupal_user'@'localhost';"
          - mysql -e 'SET GLOBAL TRANSACTION ISOLATION LEVEL READ COMMITTED'

      - name: Download Drupal files
        ansible.builtin.unarchive:
          src: https://github.com/litespeedtech/lscache-drupal/archive/master.zip
          dest: /var/www/html/modules
          remote_src: yes
          
      - name: Change ownership of a directory
        ansible.builtin.file:
          path: /var/www
          state: directory
          recurse: yes
          owner: www-data
          group: www-data
       
      - name: Creating DB configurations for phpmyadmin
        shell: "{{ item }}"
        with_items:
          - mysql < /var/www/phpmyadmin/sql/create_tables.sql
          - mysql -e "CREATE USER 'pma'@'localhost' IDENTIFIED BY 'pmapass';"
          - mysql -e "GRANT ALL PRIVILEGES ON phpmyadmin.* TO 'pma'@'localhost' WITH GRANT OPTION;"
          - mysql -e "FLUSH PRIVILEGES;"
          
      - name: Restart OpenLitespeed
        service:
           name: lsws
           state: restarted 
           
      - name: Installing postfix
        apt:
          name: [ 'postfix' , 'mailutils' ]
          state: latest      
          
      - name: Creating a directory for shell script
        ansible.builtin.file:
          path: /opt/cloudstack
          state: directory         
          
      - name: Copy files for shell script
        copy:
          src: "{{ item.confsrc }}"
          dest: "{{ item.confdest }}"
        with_items: 
          - { confsrc: '/usr/local/src/drupal-lomp-22-04/opt/cloudstack/drupal-cleanup.sh', confdest: '/opt/cloudstack/'}     

      - name: Adding a line for shell script
        lineinfile:
          path: /root/.bashrc
          line: "chmod +x /opt/cloudstack/drupal-cleanup.sh && /opt/cloudstack/drupal-cleanup.sh"
          state: present
         
      - name: Restarting sshd
        shell: "sed -i 's/ForceCommand echo Please wait until the installation is completed..../#Match User anoncvs/g' /etc/ssh/sshd_config && systemctl restart sshd"
